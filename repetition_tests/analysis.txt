--------------------------------------------------
My desktop cpu: AMD Ryzen 9 5900X, 12-Core (24 logical processors), 4251 Mhz base clock
Family: 19h (Zen 3)
Guide: https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/software-optimization-guides/56665.zip
--------------------------------------------------

REPETITION TESTER
Compiled with a release profile to elide bounds/overflow checking wherever possible.
Optimized for binary size, loop vectorization disabled (-C opt-level="z")

loop in write_to_all_bytes

// ...
    let test_section = TimeTestSection::begin();
    for (index, element) in buffer.iter_mut().enumerate() {
        *element = index as u8;
    }
    test_section.end(buffer.len() as u64)
// ...

LOOP ASSEMBLY (EXCLUDING TEST SECTION START + END)
00007FF6115A2572  49 39 c6      cmp     r14, rax ; r14 must be loaded with the size of the buffer
00007FF6115A2575  74 08         jz      0x7ff6115a257f <repetition_testing::write_to_all_bytes+0x37>
00007FF6115A2577  88 04 03      mov     byte ptr [rbx+rax*1], al
00007FF6115A257A  48 ff c0      inc     rax
00007FF6115A257D  eb f3         jmp     0x7ff6115a2572 <repetition_testing::write_to_all_bytes+0x2a>

Total bytes CPU needs to process loop: 0x00007FF6115A257D - 0x00007FF6115A2572 = 11 bytes
Best reported throughput: 3.8630gb/s -> ~3.86gb/s
My CPU frequency: 4.25 GHz
(4.25 * 1000^3) / (3.86 * 1024^3) ~=  1.025 cycles per loop iteration
So, 11 bytes in ~1.025 cycles


--------------------------------------------------
ANALYSIS OF WRITE ALL BYTES FUNCTIONS (NORMAL + ASM)

write all bytes rust function
best: 3.9060gb/s
1.0133 cycles per iteration

write all bytes asm function
best: 3.9050gb/s
1.0136 cycles per iteration

write all bytes asm function, mov replaced with 3-byte nop
best: 3.9544gb/s
1.0010 cycles per iteration

write all bytes asm function, mov removed entirely
best: 3.9531gb/s
1.0013 cycles per iteration

write all bytes asm function, just decrementing
best: 3.9396gb/s
1.0046 cycles per iteration

Conclusion:
Observations match Casey's findings from the "Linking Directly to ASM for Experimentation" video.
Did originally encounter some weird behavior where one of the above functions would randomly drop to
a throughput of about 1.9gb/s. For some reason forcing the TimeTestSection functions to be
#[inline(never)] fixed that issue. TimeTestSection::begin and TimeTestSection::end were previously
set to #[inline(always)], so maybe that was causing the compiler to output code in a weird manner in
some cases.

Basically, there's something about that mov instruction that's slowing us down...


--------------------------------------------------
NOP LOOP REP TESTS ANALYSIS
Compiled with dev profile using -C opt-level=z
For some reason using the release profile is giving weird and somewhat unexpected results even
though it's running the exact same assembly and measuring time in the exact same ways...
The only thing I noticed was that maybe the location in the binary of the test code, the timing
code, and the assembly code might have been different between the release and dev profiles...

UPDATE: 2024-09-01
Turns out this is probably something to do with the code alignment. Maybe some of the asm was
straddling the edge of a cache line somewhere so the loops were maybe taking extra cycles to run
because of cache misses.

====== nop 3x1 all bytes ======
Min: 268574330 (63.1923ms) 3.9562gb/s 0pf
Max: 292086288 (68.7243ms) 3.6377gb/s 0pf
Avg: 270574940 (63.6630ms) 3.9269gb/s 0pf

====== nop 1x3 all bytes ======
Min: 268599065 (63.1981ms) 3.9558gb/s 0pf
Max: 315568771 (74.2495ms) 3.3670gb/s 0pf
Avg: 272565674 (64.1314ms) 3.8982gb/s 0pf

====== nop 3x3 all bytes ======
Min: 270788240 (63.7132ms) 3.9238gb/s 0pf
Max: 308137943 (72.5011ms) 3.4482gb/s 0pf
Avg: 272479330 (64.1111ms) 3.8995gb/s 0pf

====== nop 1x9 all bytes ======
Min: 537352915 (126.4326ms) 1.9773gb/s 0pf
Max: 590508217 (138.9394ms) 1.7993gb/s 0pf
Avg: 546492330 (128.5830ms) 1.9443gb/s 0pf

====== nop 5x3 all bytes ======
Min: 360979317 (84.9340ms) 2.9435gb/s 0pf
Max: 403110248 (94.8469ms) 2.6358gb/s 0pf
Avg: 366563157 (86.2478ms) 2.8986gb/s 0pf

====== nop 1x15 all bytes ======
Min: 805970425 (189.6350ms) 1.3183gb/s 0pf
Max: 860760108 (202.5263ms) 1.2344gb/s 0pf
Avg: 811325180 (190.8949ms) 1.3096gb/s 0pf

So the front end of the CPU suddenly begins to tank after about 3 3-byte nops...
For completeness, the results of the release test are included here.
This test was compiled with opt-level=z as well.

====== nop 3x1 all bytes ======
Min: 268607140 (63.2000ms) 3.9557gb/s 0pf
Max: 308021384 (72.4737ms) 3.4495gb/s 0pf
Avg: 270548212 (63.6567ms) 3.9273gb/s 0pf

====== nop 1x3 all bytes ======
Min: 537237527 (126.4054ms) 1.9778gb/s 0pf
Max: 557909570 (131.2693ms) 1.9045gb/s 0pf
Avg: 541612930 (127.4349ms) 1.9618gb/s 0pf

====== nop 3x3 all bytes ======
Min: 268814880 (63.2489ms) 3.9526gb/s 0pf
Max: 340899555 (80.2095ms) 3.1168gb/s 0pf
Avg: 273065053 (64.2489ms) 3.8911gb/s 0pf

====== nop 1x9 all bytes ======
Min: 537225755 (126.4027ms) 1.9778gb/s 0pf
Max: 589634314 (138.7338ms) 1.8020gb/s 0pf
Avg: 542055239 (127.5390ms) 1.9602gb/s 0pf

====== nop 5x3 all bytes ======
Min: 537344840 (126.4307ms) 1.9774gb/s 0pf
Max: 549804078 (129.3622ms) 1.9326gb/s 0pf
Avg: 540604533 (127.1976ms) 1.9654gb/s 0pf

====== nop 1x15 all bytes ======
Min: 805960012 (189.6325ms) 1.3183gb/s 0pf
Max: 878984854 (206.8144ms) 1.2088gb/s 0pf
Avg: 813267162 (191.3518ms) 1.3065gb/s 0pf

--------------------------------------------------
BRANCH PREDICTION TESTS

====== branch never ======
Min: 271847383 (63.9625ms) 3.9085gb/s 0pf
Max: 277948852 (65.3981ms) 3.8227gb/s 0pf
Avg: 273610915 (64.3774ms) 3.8833gb/s 0pf

====== branch always ======
Min: 538339638 (126.6650ms) 1.9737gb/s 0pf
Max: 580577540 (136.6030ms) 1.8301gb/s 0pf
Avg: 544086416 (128.0171ms) 1.9529gb/s 0pf

====== branch every 2 ======
Min: 404965372 (95.2836ms) 2.6237gb/s 0pf
Max: 433574885 (102.0151ms) 2.4506gb/s 0pf
Avg: 412483060 (97.0524ms) 2.5759gb/s 0pf

====== branch every 3 ======
Min: 525751903 (123.7032ms) 2.0210gb/s 0pf
Max: 1010188535 (237.6854ms) 1.0518gb/s 0pf
Avg: 839721044 (197.5765ms) 1.2653gb/s 0pf

====== branch every 4 ======
Min: 337020580 (79.2970ms) 3.1527gb/s 0pf
Max: 352578513 (82.9576ms) 3.0136gb/s 0pf
Avg: 342325217 (80.5451ms) 3.1039gb/s 0pf

====== branch rust rand ======
Min: 3310016408 (778.8078ms) 0.3210gb/s 0pf
Max: 3354717737 (789.3255ms) 0.3167gb/s 0pf
Avg: 3326073578 (782.5859ms) 0.3195gb/s 0pf

====== branch bcrypt rand ======
Min: 3310146670 (778.8384ms) 0.3210gb/s 0pf
Max: 3352123793 (788.7152ms) 0.3170gb/s 0pf
Avg: 3319194412 (780.9673ms) 0.3201gb/s 0pf

--------------------------------------------------
CODE ALIGNMENT TESTS

====== loop_aligned_64 ======
Min: 16777257 (3.9475ms) 3.9582gb/s 0pf
Max: 17378547 (4.0890ms) 3.8213gb/s 0pf
Avg: 16964324 (3.9915ms) 3.9146gb/s 0pf

====== loop_aligned_1 ======
Min: 16777215 (3.9475ms) 3.9582gb/s 0pf
Max: 17915407 (4.2153ms) 3.7068gb/s 0pf
Avg: 16840081 (3.9623ms) 3.9435gb/s 0pf

====== loop_aligned_15 ======
Min: 16777215 (3.9475ms) 3.9582gb/s 0pf
Max: 17372385 (4.0875ms) 3.8226gb/s 0pf
Avg: 16886883 (3.9733ms) 3.9325gb/s 0pf

====== loop_aligned_31 ======
Min: 16777215 (3.9475ms) 3.9582gb/s 0pf
Max: 36698282 (8.6346ms) 1.8096gb/s 0pf
Avg: 16882190 (3.9722ms) 3.9336gb/s 0pf

====== loop_aligned_63 ======
Min: 33554430 (7.8949ms) 1.9791gb/s 0pf
Max: 34336302 (8.0789ms) 1.9341gb/s 0pf
Avg: 33846440 (7.9636ms) 1.9620gb/s 0pf
